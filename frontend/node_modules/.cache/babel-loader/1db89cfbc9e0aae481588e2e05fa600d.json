{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admi9n\\\\FSND (mesh)\\\\FSND\\\\projects\\\\02_trivia_api\\\\starter\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor() {\n    super();\n\n    this.getCategories = () => {\n      fetch('/categories', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        }\n      }).then(res => res.json()).then(({\n        categories\n      }) => {\n        this.setState({\n          categories\n        });\n      }).catch(error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      });\n    };\n\n    this.selectCategory = async ({\n      type,\n      id = 0\n    }) => {\n      await this.setState({\n        quizCategory: {\n          type: type,\n          id: id\n        }\n      });\n      this.getNextQuestion();\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      if (this.state.currentQuestion.id) {\n        this.state.previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      fetch('/quizzes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          previous_questions: this.state.previousQuestions,\n          quiz_category: this.state.quizCategory\n        })\n      }).then(res => res.json()).then(async ({\n        question\n      }) => {\n        await this.setState({\n          currentQuestion: question,\n          showAnswer: false,\n          previousQuestions: this.state.previousQuestions,\n          guess: '',\n          forceEnd: question ? false : true\n        });\n      }).catch(error => {\n        alert('Unable to load categories. Please try your request again');\n        return;\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: null,\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.renderPrePlay = () => React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: () => this.selectCategory({\n        type: 'all'\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"ALL\"), this.state.categories.map(({\n      id,\n      type\n    }) => {\n      return React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: type,\n          id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, type);\n    })));\n\n    this.renderFinalScore = () => React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \" Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \" Play Again? \"));\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      return formatGuess === this.state.currentQuestion.answer.toLowerCase();\n    };\n\n    this.renderCorrectAnswer = () => {\n      this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      let evaluate = this.evaluateAnswer();\n      return React.createElement(\"div\", {\n        className: \"quiz-play-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"quiz-question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, this.state.currentQuestion.question), React.createElement(\"div\", {\n        className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n        className: \"quiz-answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n        className: \"next-question button\",\n        onClick: this.getNextQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \" Next Question \"));\n    };\n\n    this.renderPlay = () => {\n      return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n        className: \"quiz-play-holder\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"quiz-question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, this.state.currentQuestion && this.state.currentQuestion.question), React.createElement(\"form\", {\n        onSubmit: this.submitGuess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"guess\",\n        className: \"form-input\",\n        onChange: this.handleChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"submit-guess button\",\n        type: \"submit\",\n        value: \"Submit Answer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })));\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: null,\n      categories: []\n    };\n  }\n\n  componentDidMount() {\n    this.getCategories();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.state.quizCategory ? this.renderPlay() : this.renderPrePlay());\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:\\Users\\Admi9n\\FSND (mesh)\\FSND\\projects\\02_trivia_api\\starter\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","questionsPerPlay","QuizView","constructor","getCategories","fetch","method","headers","then","res","json","categories","setState","catch","error","alert","selectCategory","type","id","quizCategory","getNextQuestion","handleChange","event","target","name","value","state","currentQuestion","previousQuestions","push","body","JSON","stringify","previous_questions","quiz_category","question","showAnswer","guess","forceEnd","submitGuess","preventDefault","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","renderPrePlay","map","renderFinalScore","formatGuess","answer","renderCorrectAnswer","renderPlay","length","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport '../stylesheets/QuizView.css';\r\n\r\nconst questionsPerPlay = 5; \r\n\r\nclass QuizView extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: {},\r\n      guess: '',\r\n      forceEnd: null,\r\n      categories: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getCategories();\r\n  }\r\n\r\n\r\n  getCategories =  () => {\r\n    fetch('/categories',{\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n    }).then((res) => res.json())\r\n    .then(({categories}) => {\r\n      this.setState({categories});\r\n    }).catch((error) => {\r\n      alert('Unable to load categories. Please try your request again')\r\n      return;\r\n    })\r\n  }\r\n\r\n  selectCategory = async ({type, id=0}) => {\r\n    await this.setState({ quizCategory : {type:type, id:id}})\r\n    this.getNextQuestion()\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({[event.target.name]: event.target.value})\r\n  }\r\n\r\n  getNextQuestion =  () => {\r\n    if(this.state.currentQuestion.id) { this.state.previousQuestions.push(this.state.currentQuestion.id) }\r\n    fetch('/quizzes',{\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8'\r\n      },\r\n      body: JSON.stringify({\r\n        previous_questions: this.state.previousQuestions,\r\n        quiz_category: this.state.quizCategory \r\n      })\r\n    }).then((res) => res.json())\r\n    .then( async ({question}) => {\r\n      await this.setState({\r\n        currentQuestion: question,\r\n        showAnswer: false,\r\n        previousQuestions: this.state.previousQuestions,\r\n        guess: '',\r\n        forceEnd: question ? false : true\r\n      })\r\n    }).catch((error) => {\r\n      alert('Unable to load categories. Please try your request again')\r\n      return;\r\n    })\r\n  }\r\n\r\n  submitGuess = (event) => {\r\n    event.preventDefault();\r\n    this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =   this.evaluateAnswer()\r\n    this.setState({\r\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\r\n      showAnswer: true\r\n    })\r\n  }\r\n\r\n  restartGame = () => {\r\n    this.setState({\r\n      quizCategory: null,\r\n      previousQuestions: [],\r\n      showAnswer: false,\r\n      numCorrect: 0,\r\n      currentQuestion: null,\r\n      guess: '',\r\n      forceEnd: false\r\n    })\r\n  }\r\n\r\n\r\n  renderPrePlay = () => (\r\n          <div className=\"quiz-play-holder\">\r\n              <div className=\"choose-header\">Choose Category</div>\r\n              <div className=\"category-holder\">\r\n                  <div className=\"play-category\" onClick={() => this.selectCategory({type:'all'})}>ALL</div>\r\n                  {this.state.categories.map(({id, type}) => {\r\n                  return (\r\n                    <div\r\n                      key={id}\r\n                      value={id}\r\n                      className=\"play-category\"\r\n                      onClick={() => this.selectCategory({type:type, id})}>\r\n                      {type}\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n          </div>\r\n  )\r\n\r\n  renderFinalScore = () => (\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\r\n        <div className=\"play-again button\" onClick={ this.restartGame}> Play Again? </div>\r\n      </div>\r\n    )\r\n\r\n  evaluateAnswer = () => {\r\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    return formatGuess === this.state.currentQuestion.answer.toLowerCase();\r\n  }\r\n\r\n  renderCorrectAnswer = () => {\r\n    this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\r\n    let evaluate =   this.evaluateAnswer()\r\n    return(\r\n      <div className=\"quiz-play-holder\">\r\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\r\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\r\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\r\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  renderPlay = () => {\r\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\r\n      ?  this.renderFinalScore()\r\n      : this.state.showAnswer \r\n        ?  this.renderCorrectAnswer()\r\n        : (\r\n          <div className=\"quiz-play-holder\">\r\n            <div className=\"quiz-question\">{this.state.currentQuestion && this.state.currentQuestion.question}</div>\r\n            <form onSubmit={ this.submitGuess}>\r\n              <input type=\"text\" name=\"guess\" className=\"form-input\" onChange={this.handleChange}/>\r\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\r\n            </form>\r\n          </div>\r\n        )\r\n  };\r\n\r\n  render(){\r\n    return (\r\n      <>\r\n        {this.state.quizCategory ? this.renderPlay() : this.renderPrePlay()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuizView;\r\n"]},"metadata":{},"sourceType":"module"}